"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const os = __importStar(require("os"));
const path = __importStar(require("path"));
const is_there_1 = __importDefault(require("is-there"));
const mkdirp = __importStar(require("mkdirp"));
const util = __importStar(require("util"));
const writeFile = util.promisify(fs.writeFile);
class DtsContent {
    constructor(options) {
        this.dropExtension = options.dropExtension;
        this.rootDir = options.rootDir;
        this.searchDir = options.searchDir;
        this.outDir = options.outDir;
        this.rInputPath = options.rInputPath;
        this.rawTokenList = options.rawTokenList;
        this.resultList = options.resultList;
        this.EOL = options.EOL;
    }
    get contents() {
        return this.resultList;
    }
    get formatted() {
        if (!this.resultList || !this.resultList.length)
            return '';
        return [
            'declare const styles: {',
            ...this.resultList.map(line => '  ' + line),
            '};',
            'export = styles;',
            ''
        ].join(os.EOL) + this.EOL;
    }
    get tokens() {
        return this.rawTokenList;
    }
    get outputFilePath() {
        const outputFileName = this.dropExtension ? removeExtension(this.rInputPath) : this.rInputPath;
        return path.join(this.rootDir, this.outDir, outputFileName + '.d.ts');
    }
    get inputFilePath() {
        return path.join(this.rootDir, this.searchDir, this.rInputPath);
    }
    writeFile(postprocessor = (formatted) => formatted) {
        return __awaiter(this, void 0, void 0, function* () {
            const finalOutput = postprocessor(this.formatted);
            const outPathDir = path.dirname(this.outputFilePath);
            if (!is_there_1.default(outPathDir)) {
                mkdirp.sync(outPathDir);
            }
            yield writeFile(this.outputFilePath, finalOutput, 'utf8');
        });
    }
}
exports.DtsContent = DtsContent;
function removeExtension(filePath) {
    const ext = path.extname(filePath);
    return filePath.replace(new RegExp(ext + '$'), '');
}
//# sourceMappingURL=dts-content.js.map
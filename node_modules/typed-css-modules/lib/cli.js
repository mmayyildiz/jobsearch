#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs = __importStar(require("yargs"));
const run_1 = require("./run");
const yarg = yargs.usage('Create .css.d.ts from CSS modules *.css files.\nUsage: $0 [options] <search directory>')
    .example('$0 src/styles', '')
    .example('$0 src -o dist', '')
    .example('$0 -p styles/**/*.icss -w', '')
    .detectLocale(false)
    .demand(['_'])
    .alias('p', 'pattern').describe('p', 'Glob pattern with css files')
    .alias('o', 'outDir').describe('o', 'Output directory')
    .alias('w', 'watch').describe('w', 'Watch input directory\'s css files or pattern').boolean('w')
    .alias('c', 'camelCase').describe('c', 'Convert CSS class tokens to camelcase')
    .alias('d', 'dropExtension').describe('d', 'Drop the input files extension').boolean('d')
    .alias('s', 'silent').describe('s', 'Silent output. Do not show "files written" messages').boolean('s')
    .alias('h', 'help').help('h')
    .version(require('../package.json').version);
main();
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        const argv = yarg.argv;
        if (argv.h) {
            yarg.showHelp();
            return;
        }
        let searchDir;
        if (argv._ && argv._[0]) {
            searchDir = argv._[0];
        }
        else if (argv.p) {
            searchDir = './';
        }
        else {
            yarg.showHelp();
            return;
        }
        yield run_1.run(searchDir, {
            pattern: argv.p,
            outDir: argv.o,
            watch: argv.w,
            camelCase: argv.c,
            dropExtension: argv.d,
            silent: argv.s
        });
    });
}
;
//# sourceMappingURL=cli.js.map
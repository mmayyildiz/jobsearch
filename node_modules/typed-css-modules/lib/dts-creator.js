"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const process = __importStar(require("process"));
const path = __importStar(require("path"));
const os = __importStar(require("os"));
const camelcase_1 = __importDefault(require("camelcase"));
const file_system_loader_1 = __importDefault(require("./file-system-loader"));
const dts_content_1 = require("./dts-content");
class DtsCreator {
    constructor(options) {
        if (!options)
            options = {};
        this.rootDir = options.rootDir || process.cwd();
        this.searchDir = options.searchDir || '';
        this.outDir = options.outDir || this.searchDir;
        this.loader = new file_system_loader_1.default(this.rootDir, options.loaderPlugins);
        this.inputDirectory = path.join(this.rootDir, this.searchDir);
        this.outputDirectory = path.join(this.rootDir, this.outDir);
        this.camelCase = options.camelCase;
        this.dropExtension = !!options.dropExtension;
        this.EOL = options.EOL || os.EOL;
    }
    create(filePath, initialContents, clearCache = false) {
        return __awaiter(this, void 0, void 0, function* () {
            let rInputPath;
            if (path.isAbsolute(filePath)) {
                rInputPath = path.relative(this.inputDirectory, filePath);
            }
            else {
                rInputPath = path.relative(this.inputDirectory, path.join(process.cwd(), filePath));
            }
            if (clearCache) {
                this.loader.tokensByFile = {};
            }
            const res = yield this.loader.fetch(filePath, "/", undefined, initialContents);
            if (res) {
                const tokens = res;
                const keys = Object.keys(tokens);
                const convertKey = this.getConvertKeyMethod(this.camelCase);
                const result = keys
                    .map(k => convertKey(k))
                    .map(k => 'readonly "' + k + '": string;');
                const content = new dts_content_1.DtsContent({
                    dropExtension: this.dropExtension,
                    rootDir: this.rootDir,
                    searchDir: this.searchDir,
                    outDir: this.outDir,
                    rInputPath,
                    rawTokenList: keys,
                    resultList: result,
                    EOL: this.EOL
                });
                return content;
            }
            else {
                throw res;
            }
        });
    }
    getConvertKeyMethod(camelCaseOption) {
        switch (camelCaseOption) {
            case true:
                return camelcase_1.default;
            case 'dashes':
                return this.dashesCamelCase;
            default:
                return (key) => key;
        }
    }
    /**
     * Replaces only the dashes and leaves the rest as-is.
     *
     * Mirrors the behaviour of the css-loader:
     * https://github.com/webpack-contrib/css-loader/blob/1fee60147b9dba9480c9385e0f4e581928ab9af9/lib/compile-exports.js#L3-L7
     */
    dashesCamelCase(str) {
        return str.replace(/-+(\w)/g, function (match, firstLetter) {
            return firstLetter.toUpperCase();
        });
    }
}
exports.DtsCreator = DtsCreator;
//# sourceMappingURL=dts-creator.js.map